# ---
# # roles/kubespray/tasks/main.yml

# - name: Clone Kubespray
#   git:
#     repo: https://github.com/kubernetes-sigs/kubespray.git
#     dest: /home/pisethkhon888/kubespray
#     version: master

# - name: Install Python dependencies for Kubespray
#   pip:
#     requirements: /home/pisethkhon888/kubespray/requirements.txt
#     executable: pip3

# # ---- Discover VM IPs ----
# # (this assumes you already created VMs with Ansible/Terraform and have registered their IPs in variables)

# - name: Wait for VMs to come online (SSH check)
#   wait_for:
#     host: "{{ item }}"
#     port: 22
#     timeout: 300
#   loop:
#     - "{{ hostvars['master1']['ansible_host'] | default('') }}"
#     - "{{ hostvars['node1']['ansible_host'] | default('') }}"
#     - "{{ hostvars['node2']['ansible_host'] | default('') }}"
#     - "{{ hostvars['node3']['ansible_host'] | default('') }}"
#   when: item != ""

# # ---- Update Kubespray inventory ----
# - name: Ensure inventory directory exists
#   file:
#     path: /home/pisethkhon888/kubespray/inventory/mycluster
#     state: directory

# - name: Copy base hosts.yaml to Kubespray inventory
#   copy:
#     src: /home/pisethkhon888/k8s/inventory/mycluster/hosts.yml
#     dest: /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
#     force: yes

# - name: Inject SSH config into hosts.yaml
#   lineinfile:
#     path: /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
#     insertafter: "{{ item.after }}"
#     line: "{{ item.line }}"
#   loop:
#     - { after: "master1:", line: "      ansible_user: pisethkhon888" }
#     - { after: "master1:", line: "      ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa" }
#     - { after: "node1:", line: "      ansible_user: pisethkhon888" }
#     - { after: "node1:", line: "      ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa" }
#     - { after: "node2:", line: "      ansible_user: pisethkhon888" }
#     - { after: "node2:", line: "      ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa" }
#     - { after: "node3:", line: "      ansible_user: pisethkhon888" }
#     - { after: "node3:", line: "      ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa" }

# # ---- Deploy Cluster ----
# - name: Deploy HA Kubernetes cluster with Kubespray
#   command: >
#     ansible-playbook -i /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
#     --become --become-user=root
#     /home/pisethkhon888/kubespray/cluster.yml
#   args:
#     chdir: /home/pisethkhon888/kubespray
# roles/kubespray/tasks/main.yml
---
# roles/kubespray/tasks/main.yml

# # 0️⃣ Remove old Kubespray if exists
# - name: Remove old Kubespray directory
#   file:
#     path: /home/pisethkhon888/kubespray
#     state: absent

# # 1️⃣ Clone Kubespray
# - name: Clone Kubespray
#   git:
#     repo: https://github.com/kubernetes-sigs/kubespray.git
#     dest: /home/pisethkhon888/kubespray
#     version: master
#   ignore_errors: yes

# # 2️⃣ Install Python dependencies
# - name: Install Python dependencies for Kubespray
#   pip:
#     requirements: /home/pisethkhon888/kubespray/requirements.txt
#     executable: pip3

# # 3️⃣ Wait for SSH to master
# - name: Wait for master SSH
#   wait_for:
#     host: "10.148.0.14"
#     port: 22
#     timeout: 300

# # 4️⃣ Wait for SSH on worker nodes (use IPs from vms role)
# - name: Wait for worker nodes SSH
#   wait_for:
#     host: "{{ item.instance.networkInterfaces[0].networkIP }}"
#     port: 22
#     timeout: 300
#   loop: "{{ new_nodes.results }}"

# # 5️⃣ Copy SSH keys to master
# - name: Copy SSH keys to master
#   authorized_key:
#     user: pisethkhon888
#     state: present
#     key: "{{ lookup('file', '/home/pisethkhon888/.ssh/id_rsa.pub') }}"
#   delegate_to: "10.148.0.14"

# # 6️⃣ Copy SSH keys to worker nodes
# - name: Copy SSH keys to worker nodes
#   authorized_key:
#     user: pisethkhon888
#     state: present
#     key: "{{ lookup('file', '/home/pisethkhon888/.ssh/id_rsa.pub') }}"
#   loop: "{{ new_nodes.results }}"
#   delegate_to: "{{ item.instance.networkInterfaces[0].networkIP }}"

# # 7️⃣ Generate hosts.yaml dynamically
# - name: Ensure inventory directory exists
#   file:
#     path: /home/pisethkhon888/kubespray/inventory/mycluster
#     state: directory

# - name: Generate hosts.yaml dynamically
#   copy:
#     dest: /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
#     content: |
#       all:
#         hosts:
#           master1:
#             ansible_host: 10.148.0.14
#             ansible_user: pisethkhon888
#             ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa
#           {% for node in new_nodes.results %}
#           node{{ loop.index }}:
#             ansible_host: {{ node.instance.networkInterfaces[0].networkIP }}
#             ansible_user: pisethkhon888
#             ansible_ssh_private_key_file: /home/pisethkhon888/.ssh/id_rsa
#           {% endfor %}

#         children:
#           kube_control_plane:
#             hosts:
#               master1:
#           kube_nodes:
#             hosts:
#               {% for node in new_nodes.results %}
#               node{{ loop.index }}:
#               {% endfor %}
#           etcd:
#             hosts:
#               master1:
#           k8s_cluster:
#             children:
#               kube_control_plane:
#               kube_nodes:

# # 8️⃣ Deploy Kubespray cluster
# - name: Deploy HA Kubernetes cluster with Kubespray
#   command: >
#     ansible-playbook -i /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
#     --become --become-user=root
#     /home/pisethkhon888/kubespray/cluster.yml
#   args:
#     chdir: /home/pisethkhon888/kubespray



#################
# 0️⃣ Remove old Kubespray if exists
# - name: Remove old Kubespray directory
#   file:
#     path: /home/pisethkhon888/k8s/kubespray
#     state: absent

# #1️⃣ Clone Kubespray
# - name: Clone Kubespray
#   git:
#     repo: https://github.com/kubernetes-sigs/kubespray.git
#     dest: /home/pisethkhon888/k8s/kubespray
#     version: master
#   ignore_errors: yes

# # 4️⃣ Install required Python packages
# - name: Install Python requirements for Kubespray
#   pip:
#     requirements: "{{ kubespray_dir }}/requirements.txt"
#     executable: /usr/bin/pip3
  
# - name: Remove Git and CI directories from Kubespray
#   file:
#     path: "{{ item }}"
#     state: absent
#   loop:
#     - /home/pisethkhon888/k8s/kubespray/.git
#     - /home/pisethkhon888/k8s/kubespray/.github
#     - /home/pisethkhon888/k8s/kubespray/.gitlab-ci

#################
# - name: Load GCP instances from JSON
#   set_fact:
#     gcp_data: "{{ lookup('file', '/home/pisethkhon888/k8s/gcp_instance.json') | from_json }}"

# # option1
# - name: Copy inventory.ini.j2 to inventory.ini
#   copy:
#     src: /home/pisethkhon888/k8s/inventory/mycluster/inventory.ini.j2
#     dest: /home/pisethkhon888/k8s/inventory/mycluster/inventory.ini
#     mode: '0644'

#################
# option 2
- name: Overwrite Kubespray inventory.ini with custom configuration
  template:
    src: "inventory.ini.j2"
    dest: "/home/pisethkhon888/k8s/kubespray/inventory/sample/inventory.ini"
    mode: '0644'
  vars:
    workers: "{{ gcp_data.workers }}"


- name: Enable Kubernetes dashboard
  replace:
    path: "/home/pisethkhon888/k8s/kubespray/inventory/sample/group_vars/k8s_cluster/addons.yml"
    regexp: "^#\\s*dashboard_enabled:.*"
    replace: "dashboard_enabled: true"

- name: Enable Kubernetes addons
  replace:
    path: "/home/pisethkhon888/k8s/kubespray/inventory/sample/group_vars/k8s_cluster/addons.yml"
    regexp: "^{{ item }}:\\s*false"
    replace: "{{ item }}: true"
  loop:
    - helm_enabled
    - argocd_enabled
    - metrics_server_enabled
    - cert_manager_enabled
    - ingress_nginx_enabled

# 
- name:  Kubernetes change  cluster_name 
  replace:
    path: "/home/pisethkhon888/k8s/kubespray/inventory/sample/group_vars/k8s_cluster/k8s-cluster.yml"
    regexp: "^{{ item }}:\\s*cluster.local"
    replace: "{{ item }}: pro.cluster"
  loop:
    - cluster_name
#################


# 1️⃣ Load GCP instance data
- name: Load worker nodes from JSON
  include_vars:
    file: /home/pisethkhon888/k8s/gcp_instance.json
    name: gcp_data

# 2️⃣ Set master and workers facts
- name: Set master and worker facts
  set_fact:
    master:
      name: master1
      internal_ip: 10.148.0.14
      external_ip: 34.124.178.96
    workers: "{{ gcp_data.workers }}"

# 3️⃣ Debug to confirm
- name: Debug master
  debug:
    var: master

- name: Debug workers
  debug:
    var: workers
# # Ensure inventory directory exists
# - name: Ensure inventory directory exists
#   file:
#     path: "{{ kubespray_dir }}/inventory/mycluster"
#     state: directory
#     mode: '0755'

# # Generate dynamic hosts.yml
# - name: Generate dynamic hosts.yml
#   template:
#     src: /home/pisethkhon888/k8s/inventory/mycluster/inventory.ini.j2
#     dest: "/home/pisethkhon888/k8s/inventory/mycluster/inventory.ini"
# # 

# 2️⃣ Set master and workers facts
# - name: Set master and worker facts
#   set_fact:
#     master:
#       name: master1
#       internal_ip: 10.148.0.14
#       external_ip: 34.124.178.96
#     workers: "{{ gcp_data.workers }}"

# # 3️⃣ Debug to confirm
# - name: Debug master
#   debug:
#     var: master

- name: Set worker IPs list
  set_fact:
    worker_ips: "{{ gcp_data.workers | map(attribute='internal_ip') | list }}"

# - name: Debug worker IPs
#   debug:
#     var: worker_ips
# 1️⃣ Wait for master SSH
- name: Wait for master SSH
  wait_for:
    host: "10.148.0.14"
    port: 22
    state: started
    timeout: 300


- name: Wait for worker SSH
  wait_for:
    host: "{{ item }}"
    port: 22
    state: started
    timeout: 300
  loop: "{{ worker_ips }}"

#################
# 4️⃣ Copy SSH key to master
# - name: Copy SSH key to master
#   authorized_key:
#     user: pisethkhon888
#     state: present
#     key: "{{ lookup('file', ssh_public_key_file) }}"
#   delegate_to: "10.148.0.14 "
#   vars:
#     ansible_ssh_private_key_file: "{{ ssh_private_key_file }}"


   # # 5️⃣ Copy SSH key to worker nodes
- name: Copy SSH key to worker nodes
  authorized_key:
    user: pisethkhon888
    state: present
    key: "{{ lookup('file', ssh_public_key_file) }}"
  loop: "{{ worker_ips }}"
  delegate_to: "{{ item }}"
  vars:
    ansible_ssh_private_key_file: "{{ ssh_private_key_file }}"
#################
# option1 static
# - name: Ensure inventory directory exists
#   file:
#     path: /home/pisethkhon888/kubespray/inventory/mycluster
#     state: directory
#     mode: '0755' # is a safe default for directories that Ansible needs to write files into.


# # 4️⃣ Generate dynamic hosts.yml safely
# - name: Generate dynamic hosts.yml
#   template:
#     src: /home/pisethkhon888/k8s/inventory/mycluster/hosts.yml.j2
#     dest: /home/pisethkhon888/kubespray/inventory/mycluster/hosts.yml
# option1 static


# # 3️⃣ Update cluster variables (all.yml)
# - name: Set cluster variables
#   template:
#     src: all.yml.j2
#     dest: "{{ kubespray_dir }}/inventory/mycluster/group_vars/all.yml"



# 2️⃣ Ensure artifacts directory exists on control machine
# - name: Ensure artifacts directory exists
#   file:
#     path: "{{ kubespray_dir }}/inventory/mycluster/artifacts"
#     state: directory
#     mode: '0755'
#   delegate_to: localhost

# 3️⃣ Initialize Kubernetes master node (only if not exists)
# - name: Initialize Kubernetes master node
#   command: kubeadm init --apiserver-advertise-address=10.148.0.14  --pod-network-cidr=10.244.0.0/16
#   args:
#     creates: /etc/kubernetes/admin.conf
#   become: yes
#   delegate_to: "10.148.0.14 "
#   ignore_errors: yes

# 2️⃣ Update inventory hosts (masters/workers) dynamically
# - name: Update inventory hosts
#   template:
#     src: hosts.yaml.j2
#     dest: "{{ kubespray_dir }}/inventory/mycluster/hosts.yaml"

# # 3️⃣ Update cluster variables (all.yml)
# - name: Set cluster variables
#   template:
#     src: all.yml.j2
#     dest: "{{ kubespray_dir }}/inventory/mycluster/group_vars/all.yml"
# 5️⃣ add  cluster addons
# - name: Enable cluster addons
#   blockinfile:
#     path: "/home/pisethkhon888/kubespray/inventory/sample/group_vars/k8s_cluster/addons.yml"
#     create: yes
#     block: |
#       dashboard_enabled: true
#       helm_enabled: true
#       argocd_enabled: true
#       metrics_server_enabled: true
#       cert_manager_enabled: true
#       ingress_nginx_enabled: true


# 6️⃣ Run Kubespray cluster setup
# - name: Deploy HA Kubernetes cluster
#   command: >
#     ansible-playbook -b -v -i {{ inventory_file }} cluster.yml
#   args:
#     chdir: "{{ kubespray_dir }}"

# ############
# 2️⃣ Run Kubespray to setup HA cluster
# - name: Run Kubespray to setup HA cluster
#   command: >
#     ansible-playbook -b -v
#     -i /home/pisethkhon888/k8s/kubespray/inventory/sample/inventory.ini
#     cluster.yml
#   args:
#     chdir: "/home/pisethkhon888/k8s/kubespray"
# ############



# - name: Create .kube directory
#   file:
#     path: "{{ lookup('env','HOME') }}/.kube"
#     state: directory
#     mode: '0755'

# - name: Copy admin.conf to user kube config
#   copy:
#     src: /etc/kubernetes/admin.conf
#     dest: "{{ lookup('env','HOME') }}/.kube/config"
#     remote_src: yes
#     owner: "{{ lookup('env','USER') }}"
#     group: "{{ lookup('env','USER') }}"
#     mode: '0644'


